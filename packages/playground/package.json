{
  "name": "playground",
  "version": "0.0.0-0",
  "private": true,
  "browserslist": [
    ">0.2%",
    "not dead",
    "not ie <= 11",
    "not op_mini all"
  ],
  "localDependencies": {
    "botframework-webchat": "production",
    "botframework-webchat-core": "production"
  },
  "pinDependencies": {
    "adaptivecards": [
      "2.11.0"
    ],
    "rxjs": [
      "5"
    ]
  },
  "dependencies": {
    "@emotion/react": "11.11.4",
    "@fluentui/react": "8.118.2",
    "adaptivecards": "2.11.0",
    "botframework-directlinejs": "0.15.5",
    "botframework-webchat": "0.0.0-0",
    "botframework-webchat-core": "0.0.0-0",
    "classnames": "2.5.1",
    "memoize-one": "6.0.0",
    "on-error-resume-next": "1.1.0",
    "rxjs": "5.5.12"
  },
  "devDependencies": {
    "prettier": "^3.2.5",
    "react-scripts": "^5.0.1"
  },
  "scripts": {
    "build": "react-scripts build",
    "bump": "npm run bump:prod && npm run bump:dev && (npm audit fix || exit 0)",
    "bump:dev": "PACKAGES_TO_BUMP=$(cat package.json | jq -r '(.pinDependencies // {}) as $P | (.localDependencies // {} | keys) as $L | (.devDependencies // {}) | to_entries | map(select(.key as $K | $L | contains([$K]) | not)) | map(.key + \"@\" + ($P[.key] // [\"latest\"])[0]) | join(\" \")') && [ ! -z \"$PACKAGES_TO_BUMP\" ] && npm install $PACKAGES_TO_BUMP || true",
    "bump:prod": "PACKAGES_TO_BUMP=$(cat package.json | jq -r '(.pinDependencies // {}) as $P | (.localDependencies // {} | keys) as $L | (.dependencies // {}) | to_entries | map(select(.key as $K | $L | contains([$K]) | not)) | map(.key + \"@\" + ($P[.key] // [\"latest\"])[0]) | join(\" \")') && [ ! -z \"$PACKAGES_TO_BUMP\" ] && npm install --save-exact $PACKAGES_TO_BUMP || true",
    "eject": "react-scripts eject",
    "postversion": "cat package.json | jq '.version as $V | (.localDependencies // {} | with_entries(select(.value == \"production\") | { key: .key, value: $V })) as $L1 | (.localDependencies // {} | with_entries(select(.value == \"development\") | { key: .key, value: $V })) as $L2 | ((.dependencies // {}) + $L1 | to_entries | sort_by(.key) | from_entries) as $D1 | ((.devDependencies // {}) + $L2 | to_entries | sort_by(.key) | from_entries) as $D2 | . + { dependencies: $D1, devDependencies: $D2 }' > package-temp.json && mv package-temp.json package.json",
    "preversion": "cat package.json | jq '(.localDependencies // {} | to_entries | map([if .value == \"production\" then \"dependencies\" else \"devDependencies\" end, .key])) as $P | delpaths($P)' > package-temp.json && mv package-temp.json package.json",
    "start": "react-scripts start",
    "test": "react-scripts test --env=jsdom"
  }
}
